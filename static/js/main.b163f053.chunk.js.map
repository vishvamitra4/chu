{"version":3,"sources":["block/block.js","block2/block2.js","App.js","serviceWorker.js","index.js"],"names":["Mybtn","Styled","button","P1","p","Input","input","Block","console","log","className","this","props","name","type","onChange","namechange","value","onClick","removecontent","Component","Block2","Math","floor","random","App","state","Array","id","myBollean","deleteContentHandler","k","excessarray","splice","setState","NameChangeHandler","event","index","findIndex","indeex","target","array","ChangeBooleanHandler","f","classes","push","d","c","map","i","key","apptitle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"u8BAGA,IAAMA,EAAQC,IAAOC,OAAV,KAeLC,EAAKF,IAAOG,EAAV,KASFC,EAAQJ,IAAOK,MAAV,KAuBIC,E,uKAZP,OADAC,QAAQC,IAAI,2BAER,yBAAKC,UAAU,SACX,kBAACP,EAAD,mBAAgBQ,KAAKC,MAAMC,MAC3B,kBAACR,EAAD,CAAOS,KAAK,OAAOC,SAAUJ,KAAKC,MAAMI,WAAYC,MAAON,KAAKC,MAAMC,OACtE,kBAACb,EAAD,CAAOc,KAAK,OAAOI,QAASP,KAAKC,MAAMO,eAAvC,kB,GAPIC,aCnBLC,G,6KAXP,OACI,yBAAKX,UAAU,SACX,mDACA,yCAAeY,KAAKC,MAAsB,GAAhBD,KAAKE,UAA/B,KACA,4D,GANKJ,cCmHNK,G,wDAhHb,WAAYb,GAAO,IAAD,8BAChB,cAAMA,IAYRc,MAAQ,CACNC,MAAO,CACL,CAAEC,GAAI,IAAKf,KAAM,eACjB,CAAEe,GAAI,KAAMf,KAAM,WAClB,CAAEe,GAAI,MAAOf,KAAM,eAErBgB,WAAW,GAnBK,EAwBlBC,qBAAuB,SAACC,GACtB,IAAMC,EAAW,YAAO,EAAKN,MAAMC,OACnCK,EAAYC,OAAOF,EAAG,GACtB,EAAKG,SAAS,CAAEP,MAAOK,KA3BP,EA+BlBG,kBAAoB,SAACC,EAAOR,GAC1B,IAAMS,EAAQ,EAAKX,MAAMC,MAAMW,WAAU,SAAAlC,GACvC,OACEA,EAAEwB,KAAOA,KAIPW,EAAM,eACP,EAAKb,MAAMC,MAAMU,IAGtBE,EAAO1B,KAAOuB,EAAMI,OAAOvB,MAC3B,IAAMwB,EAAK,YAAO,EAAKf,MAAMC,OAC7Bc,EAAMJ,GAASE,EACf,EAAKL,SAAS,CAAEP,MAAOc,KA7CP,EAmDlBC,qBAAqB,WACtB,IAAMC,EAAG,EAAKjB,MAAMG,UACpB,EAAKK,SACH,CAACL,WAAac,KApDbnC,QAAQC,IAAI,wBAFI,E,gEAWhBD,QAAQC,IAAI,gC,+BAiDJ,IAAD,OACXD,QAAQC,IAAI,mBAER,IAAMmC,EAAS,IACY,IAAvBjC,KAAKe,MAAMG,WACbe,EAAQC,KAAK,aAEY,IAAvBlC,KAAKe,MAAMG,WACbe,EAAQC,KAAK,UAIf,IAAIC,EACF,6BACE,4BAAQpC,UAAWkC,EAAS1B,QAASP,KAAK+B,qBAAsB5B,KAAK,QAArE,iBAGAiC,EAAI,KAwBR,OAtB2B,IAAvBpC,KAAKe,MAAMG,YACbkB,EACE,6BACGpC,KAAKe,MAAMC,MAAMqB,KAChB,SAACC,GACC,OAAO,kBAAC,EAAD,CACLpC,KAAMoC,EAAEpC,KACRqC,IAAKD,EAAErB,GACPT,cAAe,EAAKW,qBACpBd,WAAY,SAACoB,GAAD,OAAW,EAAKD,kBAAkBC,EAAOa,EAAErB,WAMjEkB,EACE,6BACE,4BAAQpC,UAAWkC,EAAU1B,QAASP,KAAK+B,qBAAsB5B,KAAK,QAAtE,mBAMJ,6BACE,4BAAKH,KAAKC,MAAMuC,UAChB,kBAAC,EAAD,MACCL,EACAC,M,gDArGyBnC,EAAOc,GAErC,OADAlB,QAAQC,IAAI,qCAAsCG,GAC3Cc,M,GARON,cCOEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKR,SAAU,6BAEjBS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,c","file":"static/js/main.b163f053.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './block.css';\r\nimport Styled from 'styled-components';\r\nconst Mybtn = Styled.button`\r\ndisplay: block;\r\n\r\npadding: 6px;\r\nmargin: 15px auto;\r\nbackground-color: white;\r\nborder: 1px solid white;\r\nborder-radius: 3px;\r\n&:hover{\r\n    background-color: blue;\r\n    border: 1px solid blue; \r\n    color: white;\r\n    transition : 0.7s;\r\n}`;\r\n\r\nconst P1 = Styled.p`\r\ncolor: white;\r\nfont-size: 140%;\r\n& hover: {\r\n    color: green;\r\n    transition: 0.8s;\r\n}\r\n`;\r\n\r\nconst Input = Styled.input`\r\ndisplay: block;\r\nmargin: 5px auto;\r\npadding: 7px;\r\nborder-radius: 2px;\r\nborder: 1px solid white;`;\r\n\r\n\r\nclass Block extends Component{\r\n    render(){\r\n        console.log('[block.js] rendering...');\r\n        return (\r\n            <div className=\"block\">\r\n                <P1>My name is {this.props.name}</P1>\r\n                <Input type=\"text\" onChange={this.props.namechange} value={this.props.name} />\r\n                <Mybtn type=\"text\" onClick={this.props.removecontent}>Remove Me</Mybtn>\r\n            </div>\r\n        );\r\n    }\r\n    }\r\n   \r\n\r\n\r\nexport default Block;","import React, { Component } from 'react';\r\nimport './block2.css';\r\n\r\nclass Block2 extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"first\">\r\n                <h1>Hi, I'm a React App</h1>\r\n                <h2>My age is {Math.floor(Math.random() * 81)} </h2>\r\n                <h3>This is Really working.</h3>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n};\r\n\r\nexport default Block2;\r\n\r\n","import React, { Component } from 'react';\nimport Block from './block/block';\nimport Block2 from './block2/block2';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props) //  inherting the extended components.\n    console.log('[App.js] constructor');\n  }\n\n  static getDerivedStateFromProps(props, state){\n    console.log('[App.js]  getDerivedStateFromProps', props);\n    return state;\n  }\n\n  componentDidMount(){\n    console.log('[App.js] componentDidMount');\n  }\n  state = {\n    Array: [\n      { id: \"r\", name: \"Vishvamitra\" },\n      { id: \"rr\", name: \"Krishna\" },\n      { id: \"rrr\", name: \"Maxmellian\" },\n    ],\n    myBollean: true\n  }\n \n  /// deletecontent handler\n\n  deleteContentHandler = (k) => {\n    const excessarray = [...this.state.Array];\n    excessarray.splice(k, 1);\n    this.setState({ Array: excessarray });\n  };\n\n  // namechangeHandler\n  NameChangeHandler = (event, id) => {\n    const index = this.state.Array.findIndex(p => {\n      return (\n        p.id === id\n      )\n    });\n\n    const indeex = {\n      ...this.state.Array[index]\n\n    };\n    indeex.name = event.target.value;\n    const array = [...this.state.Array];\n    array[index] = indeex;\n    this.setState({ Array: array });\n\n  };\n\n\n  // changeBoleanHandler\n  ChangeBooleanHandler=()=>{\n const f= this.state.myBollean;\n this.setState(\n   {myBollean : !f}\n )\n  };\n\n\n\n  render() {\nconsole.log('[App.js] render');\n\n    const classes =[];\n    if (this.state.myBollean===true){\n      classes.push('greenbtn');\n    };\n    if (this.state.myBollean===false){\n      classes.push('redbtn');\n    }\n\n  \n    let d = (\n      <div>\n        <button className={classes} onClick={this.ChangeBooleanHandler} type=\"text\">Creat Blocks</button>\n      </div>\n    );\n    let c = null;\n\n    if (this.state.myBollean===false) {\n      c = (\n        <div>\n          {this.state.Array.map(\n            (i) => {\n              return <Block\n                name={i.name}\n                key={i.id}\n                removecontent={this.deleteContentHandler}\n                namechange={(event) => this.NameChangeHandler(event, i.id)} />\n            }\n          )}\n        </div>\n      );\n\n      d = (\n        <div>\n          <button className={classes}  onClick={this.ChangeBooleanHandler} type=\"text\">Remove Blocks</button>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <h1>{this.props.apptitle}</h1>\n        <Block2 />\n        {d}\n        {c}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App apptitle= \"Vishvamitra kumar singh\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}